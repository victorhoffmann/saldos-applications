x-postgres-common:
  &postgres-common
  image: postgres:15
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=contas'
    interval: 10s
    timeout: 5s
    retries: 5

services:

  #FILA SQS
  localstack:
    image: localstack/localstack:3.7.2
    hostname: localstack
    container_name: localstack
    environment:
      - AWS_DEFAULT_REGION=sa-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICES=sqs
      - SKIP_SSL_CERT_DOWNLOAD=1
      - DISABLE_EVENTS=1
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4566/_localstack/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # GERADOR DE MENSAGENS
  message-generator:
    image: golang:1.24.3
    container_name: message-generator
    depends_on:
      localstack:
        condition: service_healthy
        restart: true
    environment:
      # SQS settings
      - QUEUE_NAME=transacoes-financeiras-processadas
      - LOCALSTACK_ENDPOINT=http://localstack:4566

      # Generator settings
      - TOTAL_TRANSACTIONS=3000
      #- TOTAL_TRANSACTIONS=300000
      - TOTAL_ACCOUNTS=10000
      - MIN_TRANSACTION_AMOUNT=0
      - MAX_TRANSACTION_AMOUNT=100
      
      # Go settings
      - GOPROXY=https://proxy.golang.org
      - GOSUMDB=sum.golang.org
    command: >
      /bin/sh -c "
        openssl s_client -showcerts -connect proxy.golang.org:443 </dev/null 2>/dev/null |
          awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/ { print \$0 }' > /usr/local/share/ca-certificates/ca_bundle.crt &&
        update-ca-certificates &&
        rm -rf /tmp/go && mkdir -p /tmp/go && cd /tmp/go &&
        echo "" | base64 -d > message-generator.go &&
        go clean -modcache &&
        go mod init message-generator &&
        go mod tidy &&
        go mod download &&
        go run message-generator.go
      "
    working_dir: /home

  # BANCO PRIMARIO
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: contas
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - pg_primary_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  # BANCO DE REPLICA
  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    entrypoint: ["/docker-entrypoint-initdb.d/replica-entrypoint.sh"]
    depends_on:
      - postgres_primary
    volumes:
      - ./db/replica-entrypoint.sh:/docker-entrypoint-initdb.d/replica-entrypoint.sh

  # INGESTÃO APP
  ingestao-app:
    build:
      context: ./ingestao
      dockerfile: Dockerfile
    container_name: ingestao-app
    depends_on:
      localstack:
        condition: service_healthy
      message-generator:
        condition: service_started
      postgres_primary:
        condition: service_healthy
      postgres_replica:
        condition: service_started
    environment:
      DB_URL: jdbc:postgresql://postgres_primary:5432/contas
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SQS_ENDPOINT: http://localstack:4566
      SQS_QUEUE_URL: http://localstack:4566/000000000000/transacoes-financeiras-processadas
      SQS_MAX_MESSAGES: 10
      SQS_WAIT_TIME_SECONDS: 30
    ports:
      - "8081:8081"
    restart: always

  # CONSULTA APP
  consulta-app:
    build:
      context: ./consulta
      dockerfile: Dockerfile
    container_name: consulta-app
    depends_on:
      localstack:
        condition: service_healthy
      message-generator:
        condition: service_started
      postgres_primary:
        condition: service_healthy
      postgres_replica:
        condition: service_started
    environment:
      DB_URL: jdbc:postgresql://postgres_replica:5432/contas
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    ports:
      - "8080:8080"
    restart: always

volumes:
  pg_primary_data:
  pg_replica_data: